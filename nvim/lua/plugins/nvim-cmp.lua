return {
--  "hrsh7th/nvim-cmp",
--  dependencies = {
--    "mason-org/mason-lspconfig.nvim",  -- Attach to LSP after mason-lspconfig complete.
--    'hrsh7th/cmp-nvim-lsp',
--    'SirVer/ultisnips',
--    'quangnguyen30192/cmp-nvim-ultisnips'
--  },
--  config = function()
--
--    -- Set up nvim-cmp.
--    local cmp = require'cmp'
--
--    -- Preserve original <C-n> and <C-p> function.
--    local function only_cmp_visible(fn)
--      return function(fallback)
--        if not cmp.visible() then
--          fallback()
--        else
--          fn()
--        end
--      end
--    end
--
--    -- Show completion menu and select first one.
--    -- If already showed, confirm selection and trigger again.
--    local function complete_select_first(fallback)
--
--      if not cmp.visible() then
--        cmp.complete()
--      else
--        cmp.confirm({ select = true })
--        cmp.complete()
--      end
--
--      if cmp.visible() then
--        cmp.select_next_item()
--      end
--    end
--
--    cmp.setup({
--      completion = {
--        autocomplete = false,  -- Disable auto pop up.
--      },
--      snippet = {
--        expand = function(args)
--          vim.fn["UltiSnips#Anon"](args.body)  -- Use UltiSnips as snippet engine.
--        end,
--      },
--      mapping = cmp.mapping.preset.insert({
--        ['<C-p>'] = only_cmp_visible(cmp.select_prev_item),
--        ['<C-n>'] = only_cmp_visible(cmp.select_next_item),
--        ['<C-x><C-o>'] = complete_select_first,
--        ['<CR>'] = cmp.mapping.confirm({ select = true })
--      }),
--      sources = cmp.config.sources({
--        { name = 'nvim_lsp' },
--        { name = 'ultisnips' }, -- For ultisnips users.
--      })
--    })
--  end
}
